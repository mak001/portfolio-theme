@mixin fixedBG($bg) {
  background: url($bg) no-repeat fixed center;
  background-size: cover;
}

@mixin overlay($opacity, $color...) {
  &::before {
    display: block;
    content: "";

    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    $r: 0;
    $g: 0;
    $b: 0;

    @if length($color) == 1 {
      $r: red(nth($color, 1));
      $g: green(nth($color, 1));
      $b: blue(nth($color, 1));

    } @else if length($color) == 3 {
      $r: nth($color, 1);
      $g: nth($color, 2);
      $b: nth($color, 3);

    } @else if length($color) != 0 {
      @warn "Incorrect amount of color values. Must use Zero, One or Three color values.
       -- Three shall be the number thou shalt count, and the number of the counting shall be three.
       Four shalt thou not count, neither count thou two, excepting that thou then proceed to three.
       Five is right out.";
    }

    background-color: rgba($r, $g, $b, $opacity);
  }
}

@function stroke($stroke, $color) {
  $shadow: ();
  $from: $stroke*-1;
  @for $i from $from through $stroke {
    @for $j from $from through $stroke {
      $shadow: append($shadow, $i*1px $j*1px 0 $color, comma);
    }
  }
  @return $shadow;
}
/// Stroke font-character
/// @param  {Integer} $stroke - Stroke width
/// @param  {Color}   $color  - Stroke color
/// @return {Style}           - text-shadow
@mixin stroke($stroke, $color) {
  text-shadow: stroke($stroke, $color);
}

@mixin outline($stroke: 1, $color: white, $shadow: black) {
  color: $color;
  @include stroke($stroke, $shadow);
}
